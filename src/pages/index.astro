---
import scheduleData from '../data/structured-schedule-data.json';

// Определяем текущую дату
const now = new Date();
const today = new Date(now.getFullYear(), now.getMonth(), now.getDate()); // Убираем время, оставляем только дату

// Функция для парсинга даты из формата DD.MM.YYYY
function parseDate(dateString: string) {
	const [day, month, year] = dateString.split('.');
	return new Date(parseInt(year), parseInt(month) - 1, parseInt(day));
}

// Фильтруем дни - показываем только текущий день и следующие, исключаем дни без занятий
const filteredDays = scheduleData.days.filter((day) => {
	const dayDate = parseDate(day.date);
	// Показываем день, если его дата >= сегодняшней даты И есть занятия
	return dayDate >= today && day.lessons.length > 0;
});

// Получаем текущий день для отображения полоски времени
const currentDay = filteredDays.find(day => {
	const dayDate = parseDate(day.date);
	return dayDate.getTime() === today.getTime();
});

// Функция для получения текущего времени в формате HH:MM
function getCurrentTime() {
	const now = new Date();
	return now.toTimeString().slice(0, 5);
}

// Функция для проверки, находится ли текущее время в определенном временном слоте
function isTimeInSlot(currentTime: string, startTime: string, endTime: string): boolean {
	const current = currentTime.split(':').map(Number);
	const start = startTime.split(':').map(Number);
	const end = endTime.split(':').map(Number);
	
	const currentMinutes = current[0] * 60 + current[1];
	const startMinutes = start[0] * 60 + start[1];
	const endMinutes = end[0] * 60 + end[1];
	
	return currentMinutes >= startMinutes && currentMinutes <= endMinutes;
}

// Функция для получения информации о текущем уроке
function getCurrentLessonInfo() {
	const currentTime = getCurrentTime();
	
	// Проверяем, является ли сегодня выходным
	const today = new Date();
	const dayOfWeek = today.getDay(); // 0 = воскресенье, 6 = суббота
	
	// Проверяем только текущий день
	if (!currentDay) {
		// Если нет данных о текущем дне, проверяем, выходной ли это
		if (dayOfWeek === 0 || dayOfWeek === 6) {
			return {
				hasLesson: false,
				message: "Выходной"
			};
		}
		return {
			hasLesson: false,
			message: "Сейчас нет занятий"
		};
	}
	
	// Сначала проверяем, выходной ли это день
	if (dayOfWeek === 0 || dayOfWeek === 6) {
		return {
			hasLesson: false,
			message: "Выходной"
		};
	}
	
	// Ищем текущий урок
	for (const lesson of currentDay.lessons) {
		if (isTimeInSlot(currentTime, lesson.timeSlot.start, lesson.timeSlot.end)) {
			const activity = lesson.lessons[0]; // Берем первое занятие из слота
			return {
				hasLesson: true,
				message: `Сейчас: ${activity.subject}${activity.room ? ` в ${activity.room}` : ''}${activity.teacher ? ` с ${activity.teacher}` : ''}`,
				timeSlot: `${lesson.timeSlot.start} - ${lesson.timeSlot.end}`
			};
		}
	}
	
	// Если не нашли текущий урок, проверяем, есть ли занятия сегодня
	if (currentDay.lessons.length === 0) {
		return {
			hasLesson: false,
			message: "Сейчас нет занятий"
		};
	}
	
	// Проверяем, закончились ли все занятия
	const lastLesson = currentDay.lessons[currentDay.lessons.length - 1];
	if (currentTime > lastLesson.timeSlot.end) {
		return {
			hasLesson: false,
			message: "Все занятия на сегодня закончились"
		};
	}
	
	// Проверяем, еще не начались ли занятия
	const firstLesson = currentDay.lessons[0];
	if (currentTime < firstLesson.timeSlot.start) {
		return {
			hasLesson: false,
			message: `Занятия начнутся в ${firstLesson.timeSlot.start}`
		};
	}
	
	// Между занятиями
	return {
		hasLesson: false,
		message: "Сейчас перерыв между занятиями"
	};
}
---

<html lang="ru">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
		<meta name="generator" content={Astro.generator} />
		
		<!-- PWA Meta Tags -->
		<meta name="application-name" content="Расписание уроков 1М" />
		<meta name="description" content="Приложение для просмотра расписания уроков класса 1М" />
		<meta name="theme-color" content="#667eea" />
		<meta name="apple-mobile-web-app-capable" content="yes" />
		<meta name="apple-mobile-web-app-status-bar-style" content="default" />
		<meta name="apple-mobile-web-app-title" content="Расписание" />
		<meta name="msapplication-TileColor" content="#667eea" />
		<meta name="msapplication-tap-highlight" content="no" />
		
		<!-- PWA Manifest -->
		<link rel="manifest" href="./manifest.json" />
		
		<!-- Apple Touch Icons -->
		<link rel="apple-touch-icon" href="./icon-192.svg" />
		<link rel="apple-touch-icon" sizes="152x152" href="./icon-144.svg" />
		<link rel="apple-touch-icon" sizes="180x180" href="./icon-192.svg" />
		<link rel="apple-touch-icon" sizes="167x167" href="./icon-144.svg" />
		
		<!-- Favicons -->
		<link rel="icon" type="image/svg+xml" sizes="any" href="./favicon.svg" />
		<link rel="icon" type="image/svg+xml" sizes="192x192" href="./icon-192.svg" />
		<link rel="icon" type="image/svg+xml" sizes="512x512" href="./icon-512.svg" />
		
		<link rel="icon" href="./favicon.ico" />

		<title>Расписание уроков 1М</title>
		<style>
			body {
				font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
				margin: 0;
				padding: 20px;
				background-color: #f5f5f5;
			}
			.container {
				max-width: 1200px;
				margin: 0 auto;
				background: white;
				border-radius: 12px;
				box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
				overflow: hidden;
			}
			.header {
				background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
				color: white;
				padding: 30px;
				text-align: center;
			}
			.header h1 {
				margin: 0;
				font-size: 2.7rem;
				font-weight: 300;
			}
			.week-range {
				margin-top: 10px;
				font-size: 1.4rem;
				opacity: 0.9;
			}
			.current-day {
				margin-top: 8px;
				font-size: 1.2rem;
				opacity: 0.8;
				background: rgba(255, 255, 255, 0.2);
				padding: 8px 16px;
				border-radius: 20px;
				display: inline-block;
			}
			.schedule-grid {
				display: grid;
				grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
				gap: 20px;
			}
			.day-card {
				background: #fafafa;
				border-radius: 8px;
				padding: 20px;
			}
			.day-header {
				display: flex;
				justify-content: space-between;
				align-items: center;
				margin-bottom: 20px;
				padding-bottom: 15px;
				border-bottom: 2px solid #e0e0e0;
			}
			.day-name {
				font-size: 1.6rem;
				font-weight: 600;
				color: #333;
			}
			.day-date {
				font-size: 1.2rem;
				color: #666;
			}
			.lesson {
				border-radius: 6px;
				padding: 15px 0;
				margin-bottom: 10px;
				box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
			}
			.lesson-time {
				padding: 0 5px;
				font-weight: 600;
				color: #667eea;
				margin-bottom: 8px;
				font-size: 1.1rem;
			}
			.activity {
				background: #f8f9fa;
				border-radius: 4px;
				padding: 10px;
				margin-bottom: 8px;
				border-left: 3px solid #28a745;
			}
			.activity:last-child {
				margin-bottom: 0;
			}
			.subject {
				font-weight: 600;
				color: #333;
				margin-bottom: 4px;
			}
			.teacher, .room {
				font-size: 1.1rem;
				color: #666;
				margin-bottom: 2px;
			}
			.no-lessons {
				text-align: center;
				color: #999;
				font-style: italic;
				padding: 20px;
			}
			.metadata {
				background: #f8f9fa;
				padding: 20px 30px;
				border-top: 1px solid #e0e0e0;
				font-size: 1.1rem;
				color: #666;
			}
			
			/* Стили для полоски времени */
			.time-indicator {
				position: absolute;
				left: 0;
				right: 0;
				height: 2px;
				background: #ea4335;
				z-index: 10;
				box-shadow: 0 0 10px rgba(234, 67, 53, 0.5);
				transition: top 0.3s ease;
			}
			
			.time-indicator::before {
				content: '';
				position: absolute;
				left: -6px;
				top: -4px;
				width: 10px;
				height: 10px;
				background: #ea4335;
				border-radius: 50%;
				box-shadow: 0 0 5px rgba(234, 67, 53, 0.8);
			}
			
			.time-indicator::after {
				content: attr(data-time);
				position: absolute;
				right: 10px;
				top: -8px;
				background: #ea4335;
				color: white;
				padding: 2px 6px;
				border-radius: 3px;
				font-size: 13px;
				font-weight: 500;
				white-space: nowrap;
			}
			
			.schedule-container {
				position: relative;
			}
			
			.lesson-slot {
				position: relative;
				border-radius: 6px;
				padding: 15px 0;
				margin-bottom: 10px;
				box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
				transition: all 0.3s ease;
			}
			
			.lesson-slot.current-slot {
				background: linear-gradient(135deg, #f0f8ff 0%, #f5f0ff 100%);
				border: 2px solid #667eea;
				box-shadow: 0 4px 12px rgba(102, 126, 234, 0.2);
			}

			.current-slot .activity {
				border: none;
			}
			
			.lesson-slot.past-slot {
				opacity: 0.6;
				background: #f5f5f5;
			}
			
			.lesson-slot.future-slot {
				background: #fafafa;
			}
		</style>
	</head>
	<body>
		<div class="container">
			<div class="header">
				<h1>Расписание уроков</h1>
				<div class="week-range">{scheduleData.weekRange}</div>
				<div class="current-day">{getCurrentLessonInfo().message}</div>
			</div>
			
			<div class="schedule-grid">
				{filteredDays.map((day) => {
					const isCurrentDay = parseDate(day.date).getTime() === today.getTime();
					
					return (
						<div class="day-card">
							<div class="day-header">
								<div class="day-name">{day.dayName}</div>
								<div class="day-date">{day.date}</div>
							</div>
							
							<div class="schedule-container">
								{isCurrentDay && <div id="timeIndicator" class="time-indicator" style="display: none;"></div>}
								
								{day.lessons.map((lesson, index) => {
									let slotClass = 'lesson-slot';
									
									// Применяем временные классы только для текущего дня
									if (isCurrentDay) {
										const currentTime = getCurrentTime();
										const isCurrent = isTimeInSlot(currentTime, lesson.timeSlot.start, lesson.timeSlot.end);
										const isPast = currentTime > lesson.timeSlot.end;
										const isFuture = currentTime < lesson.timeSlot.start;
										
										if (isCurrent) slotClass += ' current-slot';
										else if (isPast) slotClass += ' past-slot';
										else if (isFuture) slotClass += ' future-slot';
									}
									
									return (
										<div class={slotClass} data-start={lesson.timeSlot.start} data-end={lesson.timeSlot.end}>
											<div class="lesson-time">{lesson.timeSlot.start} - {lesson.timeSlot.end}</div>
											{lesson.lessons.map((activity) => (
												<div class="activity">
													<div class="subject">{activity.subject}</div>
													{activity.teacher && <div class="teacher">👨‍🏫 {activity.teacher}</div>}
													{activity.room && <div class="room">🏢 {activity.room}</div>}
												</div>
											))}
										</div>
									);
								})}
							</div>
						</div>
					);
				})}
			</div>
			
			<div class="metadata">
				<p><strong>Все данные берутся из открытых источников.</strong></p>
				<p>Расписание получено автоматически с сайта <a href="https://schedule.mstimetables.ru/" target="_blank" rel="noopener">schedule.mstimetables.ru</a>.</p>
				<p>Дата последнего парсинга: {new Date(scheduleData.metadata.lastModified).toLocaleString('ru-RU')}</p>
			</div>
		</div>
		
		<script>
			// @ts-nocheck
			// Функция для проверки времени в слоте (дублируем серверную логику)
			/**
			 * @param {string} currentTime
			 * @param {string} startTime
			 * @param {string} endTime
			 * @returns {boolean}
			 */
			function isTimeInSlot(/** @type {string} */ currentTime, /** @type {string} */ startTime, /** @type {string} */ endTime) {
				const current = currentTime.split(':').map(Number);
				const start = startTime.split(':').map(Number);
				const end = endTime.split(':').map(Number);
				
				const currentMinutes = current[0] * 60 + current[1];
				const startMinutes = start[0] * 60 + start[1];
				const endMinutes = end[0] * 60 + end[1];
				
				return currentMinutes >= startMinutes && currentMinutes <= endMinutes;
			}
			
			// Функция для получения информации о текущем уроке (дублируем серверную логику)
			function getCurrentLessonInfo() {
				const currentTime = new Date().toTimeString().slice(0, 5);
				const currentDayContainer = document.querySelector('.day-card');
				
				// Проверяем, является ли сегодня выходным
				const today = new Date();
				const dayOfWeek = today.getDay(); // 0 = воскресенье, 6 = суббота
				
				if (!currentDayContainer) {
					// Если нет данных о текущем дне, проверяем, выходной ли это
					if (dayOfWeek === 0 || dayOfWeek === 6) {
						return {
							hasLesson: false,
							message: "Выходной"
						};
					}
					return {
						hasLesson: false,
						message: "Сейчас нет занятий"
					};
				}
				
				// Сначала проверяем, выходной ли это день
				if (dayOfWeek === 0 || dayOfWeek === 6) {
					return {
						hasLesson: false,
						message: "Выходной"
					};
				}
				
				const lessonSlots = currentDayContainer.querySelectorAll('.lesson-slot');
				
				// Ищем текущий урок
				for (const slot of lessonSlots) {
					const startTime = slot.getAttribute('data-start');
					const endTime = slot.getAttribute('data-end');
					
					if (startTime && endTime && isTimeInSlot(currentTime, startTime, endTime)) {
						const activity = slot.querySelector('.activity');
						if (activity) {
							const subject = activity.querySelector('.subject')?.textContent || '';
							const teacher = activity.querySelector('.teacher')?.textContent?.replace('👨‍🏫 ', '') || '';
							const room = activity.querySelector('.room')?.textContent?.replace('🏢 ', '') || '';
							
							let message = `Сейчас: ${subject}`;
							if (room) message += ` в ${room}`;
							if (teacher) message += ` с ${teacher}`;
							
							return {
								hasLesson: true,
								message: message,
								timeSlot: `${startTime} - ${endTime}`
							};
						}
					}
				}
				
				// Если не нашли текущий урок, проверяем статус
				if (lessonSlots.length === 0) {
					return {
						hasLesson: false,
						message: "Сейчас нет занятий"
					};
				}
				
				// Проверяем, закончились ли все занятия
				const lastSlot = lessonSlots[lessonSlots.length - 1];
				const lastEndTime = lastSlot.getAttribute('data-end');
				if (lastEndTime && currentTime > lastEndTime) {
					return {
						hasLesson: false,
						message: "Все занятия на сегодня закончились"
					};
				}
				
				// Проверяем, еще не начались ли занятия
				const firstSlot = lessonSlots[0];
				const firstStartTime = firstSlot.getAttribute('data-start');
				if (firstStartTime && currentTime < firstStartTime) {
					return {
						hasLesson: false,
						message: `Занятия начнутся в ${firstStartTime}`
					};
				}
				
				// Между занятиями
				return {
					hasLesson: false,
					message: "Сейчас перерыв между занятиями"
				};
			}
			
			// Функция для обновления информации о текущем уроке
			function updateCurrentLessonInfo() {
				const currentDayElement = document.querySelector('.current-day');
				if (currentDayElement) {
					const lessonInfo = getCurrentLessonInfo();
					currentDayElement.textContent = lessonInfo.message;
				}
			}
			
			// Функция для обновления полоски времени
			function updateTimeIndicator() {
				const timeIndicator = document.getElementById('timeIndicator');
				if (!timeIndicator) return;
				
				const currentTime = new Date();
				const currentTimeString = currentTime.toTimeString().slice(0, 5);
				
				// Находим текущий временной слот в текущем дне
				const currentSlot = document.querySelector('.current-slot');
				const container = timeIndicator.parentElement;
				
				if (currentSlot && container) {
					const slotRect = currentSlot.getBoundingClientRect();
					const containerRect = container.getBoundingClientRect();
					
					// Позиционируем полоску времени относительно контейнера дня
					const relativeTop = slotRect.top - containerRect.top;
					const slotHeight = slotRect.height;
					const startTime = currentSlot.getAttribute('data-start');
					const endTime = currentSlot.getAttribute('data-end');
					
					if (startTime && endTime) {
						// Вычисляем позицию внутри слота
						const startMinutes = parseInt(startTime.split(':')[0]) * 60 + parseInt(startTime.split(':')[1]);
						const endMinutes = parseInt(endTime.split(':')[0]) * 60 + parseInt(endTime.split(':')[1]);
						const currentMinutes = currentTime.getHours() * 60 + currentTime.getMinutes();
						
						const progress = (currentMinutes - startMinutes) / (endMinutes - startMinutes);
						const positionInSlot = progress * slotHeight;
						
						timeIndicator.style.top = (relativeTop + positionInSlot) + 'px';
						timeIndicator.style.display = 'block';
						timeIndicator.setAttribute('data-time', currentTimeString);
					}
				} else {
					timeIndicator.style.display = 'none';
				}
				
				// Обновляем классы только для слотов в текущем дне
				const currentDayContainer = timeIndicator.parentElement;
				if (currentDayContainer) {
					currentDayContainer.querySelectorAll('.lesson-slot').forEach(slot => {
						const startTime = slot.getAttribute('data-start');
						const endTime = slot.getAttribute('data-end');
						const currentTimeStr = currentTimeString;
						
						if (startTime && endTime) {
							slot.classList.remove('current-slot', 'past-slot', 'future-slot');
							
							if (isTimeInSlot(currentTimeStr, startTime, endTime)) {
								slot.classList.add('current-slot');
							} else if (currentTimeStr > endTime) {
								slot.classList.add('past-slot');
							} else if (currentTimeStr < startTime) {
								slot.classList.add('future-slot');
							}
						}
					});
				}
			}
			
			// Обновляем полоску времени и информацию о текущем уроке каждую минуту
			updateTimeIndicator();
			updateCurrentLessonInfo();
			setInterval(() => {
				updateTimeIndicator();
				updateCurrentLessonInfo();
			}, 60000);
			
			// Обновляем при прокрутке
			window.addEventListener('scroll', updateTimeIndicator);
			window.addEventListener('resize', updateTimeIndicator);
			
			// Регистрация Service Worker для PWA
			if ('serviceWorker' in navigator) {
				window.addEventListener('load', () => {
					navigator.serviceWorker.register('./sw.js')
						.then((registration) => {
							// SW зарегистрирован
						})
						.catch((registrationError) => {
							// Ошибка регистрации SW
						});
				});
			}
			
			// Обработка установки PWA
			let deferredPrompt;
			window.addEventListener('beforeinstallprompt', (e) => {
				// Предотвращаем автоматическое появление баннера установки
				e.preventDefault();
				// Сохраняем событие для последующего использования
				deferredPrompt = e;
			});
			
			// Обработка успешной установки
			window.addEventListener('appinstalled', (evt) => {
				// PWA установлено
			});
		</script>
	</body>
</html>
